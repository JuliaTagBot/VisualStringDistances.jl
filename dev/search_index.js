var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = VisualStringDistances","category":"page"},{"location":"#VisualStringDistances","page":"Home","title":"VisualStringDistances","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [VisualStringDistances]","category":"page"},{"location":"#VisualStringDistances.Glyph","page":"Home","title":"VisualStringDistances.Glyph","text":"Glyph <: AbstractArray{Bool,2}\n\nHolds the bitmap associated to a Unifont glyph in a packed format.\n\n\n\n\n\n","category":"type"},{"location":"#VisualStringDistances.Glyph-Tuple{AbstractString}","page":"Home","title":"VisualStringDistances.Glyph","text":"Glyph(s::AbstractString) --> Glyph\n\nConstruct a Glyph from a string.\n\nExamples\n\njulia> Glyph(\"abc\")\n------------------------\n------------------------\n------------------------\n---------#--------------\n---------#--------------\n---------#--------------\n--####---#-###----####--\n-#----#--##---#--#----#-\n------#--#----#--#------\n--#####--#----#--#------\n-#----#--#----#--#------\n-#----#--#----#--#------\n-#---##--##---#--#----#-\n--###-#--#-###----####--\n------------------------\n------------------------\n\n\n\n\n\n","category":"method"},{"location":"#VisualStringDistances.GlyphCoordinates","page":"Home","title":"VisualStringDistances.GlyphCoordinates","text":"GlyphCoordinates{T} <: AbstractVector{T}\n\nA sparse representation of a Glyph.\n\n\n\n\n\n","category":"type"},{"location":"#VisualStringDistances.glyph!-Tuple{Array{UInt8,1}}","page":"Home","title":"VisualStringDistances.glyph!","text":"glyph!(v::Vector{UInt8}) -> Glyph\n\nCreates a Glyph for a vector of bytes, assuming the vector represents a single Unifont character. Modifies v and may share its memory.\n\n\n\n\n\n","category":"method"},{"location":"#VisualStringDistances.printglyph","page":"Home","title":"VisualStringDistances.printglyph","text":"printglyph([io=stdout], g::Union{Char, AbstractString, Glyph})\n\nPrints a visual representation of g to io.\n\n\n\n\n\n","category":"function"},{"location":"#VisualStringDistances.visual_distance-Union{Tuple{T}, Tuple{Type{T},Union{Char, AbstractString},Union{Char, AbstractString}}} where T","page":"Home","title":"VisualStringDistances.visual_distance","text":"visual_distance(::Type{T}, s::Union{Char,AbstractString},\n                     t::Union{Char,AbstractString}; D=KL(one(T)), ϵ=T(0.1),\n                     normalize=nothing) where {T}\n\nComputes a measure of distance between the strings s and t in terms of their visual representation as rendered by GNU Unifont and quantified by an unbalanced Sinkhorn divergence from UnbalancedOptimalTransport.jl.\n\nThe keyword argument D chooses the UnbalancedOptimalTransport.AbstractDivergence used to penalize the creation or destruction of \"mass\" (black pixels). For D = VisualStringDistances.KL(ρ) for some number ρ ≥ 0, the distance is non-negative and zero if and only if the two visual representations of the strings are the same, as is generally desired.\nThe keyword argument ϵ sets the \"entropic regularization\" in the Sinkhorn divergence; see the documentation there for more information. In short, smaller ϵ computes a quantity more directly related to the cost of moving mass, but takes longer to compute.\nThe keyword argument normalize can be chosen to be a function which returns a normalizing constant given the maximum length of the two strings. The choice normalize=identity thus divides the result by the maximum length of the two strings. The choice normalize=sqrt has been found to give a good balance in some settings.\n\nOne may use printglyph to see the visual representation of the strings as rendered by GNU Unifont.\n\nnote: Note\nAt the time of this writing, GNU Unifont is capable of rendering 57086 different unicode characters. However, it renders some unicode characters with the same graphical representation; specifically, 689 distinct unicode characters have duplicate representations. Here's a set of six duplicates, for example: 'Ꮋ': Unicode U+13BB (category Lu: Letter, uppercase)\n'Н': Unicode U+041D (category Lu: Letter, uppercase)\n'ꓧ': Unicode U+A4E7 (category Lo: Letter, other)\n'Ⲏ': Unicode U+2C8E (category Lu: Letter, uppercase)\n'Η': Unicode U+0397 (category Lu: Letter, uppercase)\n'H': ASCII/Unicode U+0048 (category Lu: Letter, uppercase)The visual distance between these, therefore, is returned as zero (up to numerical error).\n\nExample\n\njulia> using VisualStringDistances\n\njulia> printglyph(\"abc\")\n------------------------\n------------------------\n------------------------\n---------#--------------\n---------#--------------\n---------#--------------\n--####---#-###----####--\n-#----#--##---#--#----#-\n------#--#----#--#------\n--#####--#----#--#------\n-#----#--#----#--#------\n-#----#--#----#--#------\n-#---##--##---#--#----#-\n--###-#--#-###----####--\n------------------------\n------------------------\n\njulia> printglyph(\"def\")\n------------------------\n------------------------\n------------------------\n------#-------------##--\n------#------------#----\n------#------------#----\n--###-#---####-----#----\n-#---##--#----#--#####--\n-#----#--#----#----#----\n-#----#--######----#----\n-#----#--#---------#----\n-#----#--#---------#----\n-#---##--#----#----#----\n--###-#---####-----#----\n------------------------\n------------------------\n\njulia> visual_distance(\"abc\", \"def\")\n31.57060117541754\n\njulia> visual_distance(\"abc\", \"abe\")\n4.979840716647487\n\n\n\n\n\n","category":"method"}]
}
